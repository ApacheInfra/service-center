/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package sd

import (
	"reflect"
	"strings"

	"github.com/apache/servicecomb-service-center/datasource"
	"github.com/apache/servicecomb-service-center/datasource/mongo/client/model"
	"github.com/apache/servicecomb-service-center/datasource/sdcommon"
	cmap "github.com/orcaman/concurrent-map"
	"go.mongodb.org/mongo-driver/bson"
)

type ruleStore struct {
	dirty bool
	// the key is documentID, is value is mongo document.
	concurrentMap cmap.ConcurrentMap
	// the key is generated by indexFuncs,the value is a set of documentID.
	indexSets IndexCache
}

func init() {
	RegisterCacher(rule, newRuleStore)
	RuleIndexCols = NewIndexCols()
	RuleIndexCols.AddIndexFunc(RuleServiceIDIndex)
	RuleIndexCols.AddIndexFunc(RuleRuleIDIndex)
}

func newRuleStore() *MongoCacher {
	options := DefaultOptions().SetTable(rule)
	cache := &ruleStore{
		dirty:         false,
		concurrentMap: cmap.New(),
		indexSets:     NewIndexCache(),
	}
	ruleUnmarshal := func(doc bson.Raw) (resource sdcommon.Resource) {
		docID := MongoDocument{}
		err := bson.Unmarshal(doc, &docID)
		if err != nil {
			return
		}
		rule := model.Rule{}
		err = bson.Unmarshal(doc, &rule)
		if err != nil {
			return
		}
		resource.Value = rule
		resource.Key = docID.ID.Hex()
		return
	}
	return NewMongoCacher(options, cache, ruleUnmarshal)
}

func (s *ruleStore) Name() string {
	return rule
}

func (s *ruleStore) Size() int {
	return s.concurrentMap.Count()
}

func (s *ruleStore) Get(key string) interface{} {
	if v, exist := s.concurrentMap.Get(key); exist {
		return v
	}
	return nil
}

func (s *ruleStore) ForEach(iter func(k string, v interface{}) (next bool)) {
	for k, v := range s.concurrentMap.Items() {
		if !iter(k, v) {
			break
		}
	}
}

func (s *ruleStore) GetValue(index string) []interface{} {
	docs := s.indexSets.Get(index)
	res := make([]interface{}, 0, len(docs))
	for _, id := range docs {
		if doc, exist := s.concurrentMap.Get(id); exist {
			res = append(res, doc)
		}
	}
	return res
}

func (s *ruleStore) Dirty() bool {
	return s.dirty
}

func (s *ruleStore) MarkDirty() {
	s.dirty = true
}

func (s *ruleStore) Clear() {
	s.dirty = false
	s.concurrentMap.Clear()
	s.indexSets.Clear()
}

func (s *ruleStore) ProcessUpdate(event MongoEvent) {
	ruleData, ok := event.Value.(model.Rule)
	if !ok {
		return
	}
	if ruleData.Rule == nil {
		return
	}
	// set the document data.
	s.concurrentMap.Set(event.DocumentID, event.Value)
	for _, index := range RuleIndexCols.GetIndexs(ruleData) {
		// set the index sets.
		s.indexSets.Put(index, event.DocumentID)
	}
}

func (s *ruleStore) ProcessDelete(event MongoEvent) {
	ruleData, ok := s.concurrentMap.Get(event.DocumentID)
	if !ok {
		return
	}
	ruleMongo := ruleData.(model.Rule)
	if ruleMongo.Rule == nil {
		return
	}
	s.concurrentMap.Remove(event.DocumentID)
	for _, index := range RuleIndexCols.GetIndexs(ruleData) {
		s.indexSets.Delete(index, event.DocumentID)
	}
}

func (s *ruleStore) isValueNotUpdated(value interface{}, newValue interface{}) bool {
	newRule, ok := newValue.(model.Rule)
	if !ok {
		return true
	}
	oldRule, ok := value.(model.Rule)
	if !ok {
		return true
	}
	return reflect.DeepEqual(newRule, oldRule)
}

func RuleServiceIDIndex(data interface{}) string {
	rule := data.(model.Rule)
	return strings.Join([]string{rule.Domain, rule.Project, rule.ServiceID}, datasource.Split)
}

func RuleRuleIDIndex(data interface{}) string {
	rule := data.(model.Rule)
	return strings.Join([]string{rule.Domain, rule.Project, rule.ServiceID, rule.Rule.RuleId}, datasource.Split)
}
