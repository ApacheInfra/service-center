// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	broker.proto

It has these top-level messages:
	Participant
	Version
	Pact
	PactVersion
	Tag
	PublishPactRequest
	Response
	PublishPactResponse
	GetAllProviderPactsRequest
	ConsumerInfo
	Links
	GetAllProviderPactsReponse
	GetProviderConsumerVersionPactRequest
	GetProviderConsumerVersionPactResponse
	Verification
	VerificationSummary
	VerificationDetail
	VerificationDetails
	VerificationResult
	PublishVerificationRequest
	PublishVerificationResponse
	RetrieveVerificationRequest
	RetrieveVerificationResponse
	BaseBrokerRequest
	BrokerAPIInfoEntry
	BrokerHomeResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package
/*
type Response_Code int32

const (
	Response_UNKNOWN Response_Code = 0
	Response_SUCCESS Response_Code = 1
	Response_FAIL    Response_Code = 2
)

var Response_Code_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCESS",
	2: "FAIL",
}
var Response_Code_value = map[string]int32{
	"UNKNOWN": 0,
	"SUCCESS": 1,
	"FAIL":    2,
}

func (x Response_Code) String() string {
	return proto1.EnumName(Response_Code_name, int32(x))
}
func (Response_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }
*/
type Participant struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AppId       string `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	ServiceName string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
}

func (m *Participant) Reset()                    { *m = Participant{} }
func (m *Participant) String() string            { return proto1.CompactTextString(m) }
func (*Participant) ProtoMessage()               {}
func (*Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Participant) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Participant) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Participant) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type Version struct {
	Id            int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number        string `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
	ParticipantId int32  `protobuf:"varint,3,opt,name=participantId" json:"participantId,omitempty"`
	Order         int32  `protobuf:"varint,4,opt,name=order" json:"order,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto1.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Version) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Version) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Version) GetParticipantId() int32 {
	if m != nil {
		return m.ParticipantId
	}
	return 0
}

func (m *Version) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type Pact struct {
	Id                    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ConsumerParticipantId int32  `protobuf:"varint,2,opt,name=consumerParticipantId" json:"consumerParticipantId,omitempty"`
	ProviderParticipantId int32  `protobuf:"varint,3,opt,name=providerParticipantId" json:"providerParticipantId,omitempty"`
	Sha                   []byte `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
	Content               []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Pact) Reset()                    { *m = Pact{} }
func (m *Pact) String() string            { return proto1.CompactTextString(m) }
func (*Pact) ProtoMessage()               {}
func (*Pact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pact) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pact) GetConsumerParticipantId() int32 {
	if m != nil {
		return m.ConsumerParticipantId
	}
	return 0
}

func (m *Pact) GetProviderParticipantId() int32 {
	if m != nil {
		return m.ProviderParticipantId
	}
	return 0
}

func (m *Pact) GetSha() []byte {
	if m != nil {
		return m.Sha
	}
	return nil
}

func (m *Pact) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type PactVersion struct {
	Id                    int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VersionId             int32 `protobuf:"varint,2,opt,name=versionId" json:"versionId,omitempty"`
	PactId                int32 `protobuf:"varint,3,opt,name=pactId" json:"pactId,omitempty"`
	ProviderParticipantId int32 `protobuf:"varint,4,opt,name=providerParticipantId" json:"providerParticipantId,omitempty"`
}

func (m *PactVersion) Reset()                    { *m = PactVersion{} }
func (m *PactVersion) String() string            { return proto1.CompactTextString(m) }
func (*PactVersion) ProtoMessage()               {}
func (*PactVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PactVersion) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PactVersion) GetVersionId() int32 {
	if m != nil {
		return m.VersionId
	}
	return 0
}

func (m *PactVersion) GetPactId() int32 {
	if m != nil {
		return m.PactId
	}
	return 0
}

func (m *PactVersion) GetProviderParticipantId() int32 {
	if m != nil {
		return m.ProviderParticipantId
	}
	return 0
}

type Tag struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	VersionId int32  `protobuf:"varint,2,opt,name=versionId" json:"versionId,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetVersionId() int32 {
	if m != nil {
		return m.VersionId
	}
	return 0
}

type PublishPactRequest struct {
	ProviderId string `protobuf:"bytes,1,opt,name=providerId" json:"providerId,omitempty"`
	ConsumerId string `protobuf:"bytes,2,opt,name=consumerId" json:"consumerId,omitempty"`
	Version    string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Pact       []byte `protobuf:"bytes,4,opt,name=pact,proto3" json:"pact,omitempty"`
}

func (m *PublishPactRequest) Reset()                    { *m = PublishPactRequest{} }
func (m *PublishPactRequest) String() string            { return proto1.CompactTextString(m) }
func (*PublishPactRequest) ProtoMessage()               {}
func (*PublishPactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PublishPactRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *PublishPactRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *PublishPactRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PublishPactRequest) GetPact() []byte {
	if m != nil {
		return m.Pact
	}
	return nil
}

/*
type Response struct {
	Code    Response_Code `protobuf:"varint,1,opt,name=code,enum=Response_Code" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Response) GetCode() Response_Code {
	if m != nil {
		return m.Code
	}
	return Response_UNKNOWN
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}
*/
type PublishPactResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *PublishPactResponse) Reset()                    { *m = PublishPactResponse{} }
func (m *PublishPactResponse) String() string            { return proto1.CompactTextString(m) }
func (*PublishPactResponse) ProtoMessage()               {}
func (*PublishPactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PublishPactResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetAllProviderPactsRequest struct {
	ProviderId string             `protobuf:"bytes,1,opt,name=providerId" json:"providerId,omitempty"`
	BaseUrl    *BaseBrokerRequest `protobuf:"bytes,2,opt,name=baseUrl" json:"baseUrl,omitempty"`
}

func (m *GetAllProviderPactsRequest) Reset()                    { *m = GetAllProviderPactsRequest{} }
func (m *GetAllProviderPactsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetAllProviderPactsRequest) ProtoMessage()               {}
func (*GetAllProviderPactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetAllProviderPactsRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetAllProviderPactsRequest) GetBaseUrl() *BaseBrokerRequest {
	if m != nil {
		return m.BaseUrl
	}
	return nil
}

type ConsumerInfo struct {
	Href string `protobuf:"bytes,1,opt,name=href" json:"href,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ConsumerInfo) Reset()                    { *m = ConsumerInfo{} }
func (m *ConsumerInfo) String() string            { return proto1.CompactTextString(m) }
func (*ConsumerInfo) ProtoMessage()               {}
func (*ConsumerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ConsumerInfo) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ConsumerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Links struct {
	Pacts []*ConsumerInfo `protobuf:"bytes,1,rep,name=pacts" json:"pacts,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto1.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Links) GetPacts() []*ConsumerInfo {
	if m != nil {
		return m.Pacts
	}
	return nil
}

type GetAllProviderPactsReponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XLinks   *Links    `protobuf:"bytes,2,opt,name=_links,json=Links" json:"_links,omitempty"`
}

func (m *GetAllProviderPactsReponse) Reset()                    { *m = GetAllProviderPactsReponse{} }
func (m *GetAllProviderPactsReponse) String() string            { return proto1.CompactTextString(m) }
func (*GetAllProviderPactsReponse) ProtoMessage()               {}
func (*GetAllProviderPactsReponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetAllProviderPactsReponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetAllProviderPactsReponse) GetXLinks() *Links {
	if m != nil {
		return m.XLinks
	}
	return nil
}

type GetProviderConsumerVersionPactRequest struct {
	ProviderId string             `protobuf:"bytes,1,opt,name=providerId" json:"providerId,omitempty"`
	ConsumerId string             `protobuf:"bytes,2,opt,name=consumerId" json:"consumerId,omitempty"`
	Version    string             `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	BaseUrl    *BaseBrokerRequest `protobuf:"bytes,4,opt,name=baseUrl" json:"baseUrl,omitempty"`
}

func (m *GetProviderConsumerVersionPactRequest) Reset()         { *m = GetProviderConsumerVersionPactRequest{} }
func (m *GetProviderConsumerVersionPactRequest) String() string { return proto1.CompactTextString(m) }
func (*GetProviderConsumerVersionPactRequest) ProtoMessage()    {}
func (*GetProviderConsumerVersionPactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *GetProviderConsumerVersionPactRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetProviderConsumerVersionPactRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *GetProviderConsumerVersionPactRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetProviderConsumerVersionPactRequest) GetBaseUrl() *BaseBrokerRequest {
	if m != nil {
		return m.BaseUrl
	}
	return nil
}

type GetProviderConsumerVersionPactResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Pact     []byte    `protobuf:"bytes,2,opt,name=pact,proto3" json:"pact,omitempty"`
}

func (m *GetProviderConsumerVersionPactResponse) Reset() {
	*m = GetProviderConsumerVersionPactResponse{}
}
func (m *GetProviderConsumerVersionPactResponse) String() string { return proto1.CompactTextString(m) }
func (*GetProviderConsumerVersionPactResponse) ProtoMessage()    {}
func (*GetProviderConsumerVersionPactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13}
}

func (m *GetProviderConsumerVersionPactResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetProviderConsumerVersionPactResponse) GetPact() []byte {
	if m != nil {
		return m.Pact
	}
	return nil
}

type Verification struct {
	Id               int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number           int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	PactVersionId    int32  `protobuf:"varint,3,opt,name=pactVersionId" json:"pactVersionId,omitempty"`
	Success          bool   `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	ProviderVersion  string `protobuf:"bytes,5,opt,name=providerVersion" json:"providerVersion,omitempty"`
	BuildUrl         string `protobuf:"bytes,6,opt,name=buildUrl" json:"buildUrl,omitempty"`
	VerificationDate string `protobuf:"bytes,7,opt,name=verificationDate" json:"verificationDate,omitempty"`
}

func (m *Verification) Reset()                    { *m = Verification{} }
func (m *Verification) String() string            { return proto1.CompactTextString(m) }
func (*Verification) ProtoMessage()               {}
func (*Verification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Verification) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Verification) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Verification) GetPactVersionId() int32 {
	if m != nil {
		return m.PactVersionId
	}
	return 0
}

func (m *Verification) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Verification) GetProviderVersion() string {
	if m != nil {
		return m.ProviderVersion
	}
	return ""
}

func (m *Verification) GetBuildUrl() string {
	if m != nil {
		return m.BuildUrl
	}
	return ""
}

func (m *Verification) GetVerificationDate() string {
	if m != nil {
		return m.VerificationDate
	}
	return ""
}

type VerificationSummary struct {
	Successful []string `protobuf:"bytes,1,rep,name=successful" json:"successful,omitempty"`
	Failed     []string `protobuf:"bytes,2,rep,name=failed" json:"failed,omitempty"`
	Unknown    []string `protobuf:"bytes,3,rep,name=unknown" json:"unknown,omitempty"`
}

func (m *VerificationSummary) Reset()                    { *m = VerificationSummary{} }
func (m *VerificationSummary) String() string            { return proto1.CompactTextString(m) }
func (*VerificationSummary) ProtoMessage()               {}
func (*VerificationSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VerificationSummary) GetSuccessful() []string {
	if m != nil {
		return m.Successful
	}
	return nil
}

func (m *VerificationSummary) GetFailed() []string {
	if m != nil {
		return m.Failed
	}
	return nil
}

func (m *VerificationSummary) GetUnknown() []string {
	if m != nil {
		return m.Unknown
	}
	return nil
}

type VerificationDetail struct {
	ProviderName               string `protobuf:"bytes,1,opt,name=providerName" json:"providerName,omitempty"`
	ProviderApplicationVersion string `protobuf:"bytes,2,opt,name=providerApplicationVersion" json:"providerApplicationVersion,omitempty"`
	Success                    bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	VerificationDate           string `protobuf:"bytes,4,opt,name=verificationDate" json:"verificationDate,omitempty"`
}

func (m *VerificationDetail) Reset()                    { *m = VerificationDetail{} }
func (m *VerificationDetail) String() string            { return proto1.CompactTextString(m) }
func (*VerificationDetail) ProtoMessage()               {}
func (*VerificationDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *VerificationDetail) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *VerificationDetail) GetProviderApplicationVersion() string {
	if m != nil {
		return m.ProviderApplicationVersion
	}
	return ""
}

func (m *VerificationDetail) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VerificationDetail) GetVerificationDate() string {
	if m != nil {
		return m.VerificationDate
	}
	return ""
}

type VerificationDetails struct {
	VerificationResults []*VerificationDetail `protobuf:"bytes,1,rep,name=verificationResults" json:"verificationResults,omitempty"`
}

func (m *VerificationDetails) Reset()                    { *m = VerificationDetails{} }
func (m *VerificationDetails) String() string            { return proto1.CompactTextString(m) }
func (*VerificationDetails) ProtoMessage()               {}
func (*VerificationDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *VerificationDetails) GetVerificationResults() []*VerificationDetail {
	if m != nil {
		return m.VerificationResults
	}
	return nil
}

type VerificationResult struct {
	Success         bool                 `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ProviderSummary *VerificationSummary `protobuf:"bytes,2,opt,name=providerSummary" json:"providerSummary,omitempty"`
	XEmbedded       *VerificationDetails `protobuf:"bytes,3,opt,name=_embedded,json=Embedded" json:"_embedded,omitempty"`
}

func (m *VerificationResult) Reset()                    { *m = VerificationResult{} }
func (m *VerificationResult) String() string            { return proto1.CompactTextString(m) }
func (*VerificationResult) ProtoMessage()               {}
func (*VerificationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *VerificationResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VerificationResult) GetProviderSummary() *VerificationSummary {
	if m != nil {
		return m.ProviderSummary
	}
	return nil
}

func (m *VerificationResult) GetXEmbedded() *VerificationDetails {
	if m != nil {
		return m.XEmbedded
	}
	return nil
}

type PublishVerificationRequest struct {
	ProviderId                 string `protobuf:"bytes,1,opt,name=providerId" json:"providerId,omitempty"`
	ConsumerId                 string `protobuf:"bytes,2,opt,name=consumerId" json:"consumerId,omitempty"`
	PactId                     int32  `protobuf:"varint,3,opt,name=pactId" json:"pactId,omitempty"`
	Success                    bool   `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	ProviderApplicationVersion string `protobuf:"bytes,5,opt,name=providerApplicationVersion" json:"providerApplicationVersion,omitempty"`
}

func (m *PublishVerificationRequest) Reset()                    { *m = PublishVerificationRequest{} }
func (m *PublishVerificationRequest) String() string            { return proto1.CompactTextString(m) }
func (*PublishVerificationRequest) ProtoMessage()               {}
func (*PublishVerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PublishVerificationRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *PublishVerificationRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *PublishVerificationRequest) GetPactId() int32 {
	if m != nil {
		return m.PactId
	}
	return 0
}

func (m *PublishVerificationRequest) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PublishVerificationRequest) GetProviderApplicationVersion() string {
	if m != nil {
		return m.ProviderApplicationVersion
	}
	return ""
}

type PublishVerificationResponse struct {
	Response     *Response           `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Confirmation *VerificationDetail `protobuf:"bytes,2,opt,name=confirmation" json:"confirmation,omitempty"`
}

func (m *PublishVerificationResponse) Reset()                    { *m = PublishVerificationResponse{} }
func (m *PublishVerificationResponse) String() string            { return proto1.CompactTextString(m) }
func (*PublishVerificationResponse) ProtoMessage()               {}
func (*PublishVerificationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PublishVerificationResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PublishVerificationResponse) GetConfirmation() *VerificationDetail {
	if m != nil {
		return m.Confirmation
	}
	return nil
}

type RetrieveVerificationRequest struct {
	ConsumerId      string `protobuf:"bytes,1,opt,name=consumerId" json:"consumerId,omitempty"`
	ConsumerVersion string `protobuf:"bytes,2,opt,name=consumerVersion" json:"consumerVersion,omitempty"`
}

func (m *RetrieveVerificationRequest) Reset()                    { *m = RetrieveVerificationRequest{} }
func (m *RetrieveVerificationRequest) String() string            { return proto1.CompactTextString(m) }
func (*RetrieveVerificationRequest) ProtoMessage()               {}
func (*RetrieveVerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RetrieveVerificationRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *RetrieveVerificationRequest) GetConsumerVersion() string {
	if m != nil {
		return m.ConsumerVersion
	}
	return ""
}

type RetrieveVerificationResponse struct {
	Response *Response           `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Result   *VerificationResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *RetrieveVerificationResponse) Reset()                    { *m = RetrieveVerificationResponse{} }
func (m *RetrieveVerificationResponse) String() string            { return proto1.CompactTextString(m) }
func (*RetrieveVerificationResponse) ProtoMessage()               {}
func (*RetrieveVerificationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RetrieveVerificationResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RetrieveVerificationResponse) GetResult() *VerificationResult {
	if m != nil {
		return m.Result
	}
	return nil
}

//
// Definitions of communication format
type BaseBrokerRequest struct {
	HostAddress string `protobuf:"bytes,1,opt,name=hostAddress" json:"hostAddress,omitempty"`
	Scheme      string `protobuf:"bytes,2,opt,name=scheme" json:"scheme,omitempty"`
}

func (m *BaseBrokerRequest) Reset()                    { *m = BaseBrokerRequest{} }
func (m *BaseBrokerRequest) String() string            { return proto1.CompactTextString(m) }
func (*BaseBrokerRequest) ProtoMessage()               {}
func (*BaseBrokerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BaseBrokerRequest) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *BaseBrokerRequest) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

type BrokerAPIInfoEntry struct {
	Href      string `protobuf:"bytes,1,opt,name=href" json:"href,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Templated bool   `protobuf:"varint,4,opt,name=templated" json:"templated,omitempty"`
}

func (m *BrokerAPIInfoEntry) Reset()                    { *m = BrokerAPIInfoEntry{} }
func (m *BrokerAPIInfoEntry) String() string            { return proto1.CompactTextString(m) }
func (*BrokerAPIInfoEntry) ProtoMessage()               {}
func (*BrokerAPIInfoEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BrokerAPIInfoEntry) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BrokerAPIInfoEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BrokerAPIInfoEntry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BrokerAPIInfoEntry) GetTemplated() bool {
	if m != nil {
		return m.Templated
	}
	return false
}

type BrokerHomeResponse struct {
	Response *Response                      `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XLinks   map[string]*BrokerAPIInfoEntry `protobuf:"bytes,2,rep,name=_links,json=Links" json:"_links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Curies   []*BrokerAPIInfoEntry          `protobuf:"bytes,3,rep,name=curies" json:"curies,omitempty"`
}

func (m *BrokerHomeResponse) Reset()                    { *m = BrokerHomeResponse{} }
func (m *BrokerHomeResponse) String() string            { return proto1.CompactTextString(m) }
func (*BrokerHomeResponse) ProtoMessage()               {}
func (*BrokerHomeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BrokerHomeResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *BrokerHomeResponse) GetXLinks() map[string]*BrokerAPIInfoEntry {
	if m != nil {
		return m.XLinks
	}
	return nil
}

func (m *BrokerHomeResponse) GetCuries() []*BrokerAPIInfoEntry {
	if m != nil {
		return m.Curies
	}
	return nil
}

func init() {
	proto1.RegisterType((*Participant)(nil), "Participant")
	proto1.RegisterType((*Version)(nil), "Version")
	proto1.RegisterType((*Pact)(nil), "Pact")
	proto1.RegisterType((*PactVersion)(nil), "PactVersion")
	proto1.RegisterType((*Tag)(nil), "Tag")
	proto1.RegisterType((*PublishPactRequest)(nil), "PublishPactRequest")
	//proto1.RegisterType((*Response)(nil), "Response")
	proto1.RegisterType((*PublishPactResponse)(nil), "PublishPactResponse")
	proto1.RegisterType((*GetAllProviderPactsRequest)(nil), "GetAllProviderPactsRequest")
	proto1.RegisterType((*ConsumerInfo)(nil), "ConsumerInfo")
	proto1.RegisterType((*Links)(nil), "Links")
	proto1.RegisterType((*GetAllProviderPactsReponse)(nil), "GetAllProviderPactsReponse")
	proto1.RegisterType((*GetProviderConsumerVersionPactRequest)(nil), "GetProviderConsumerVersionPactRequest")
	proto1.RegisterType((*GetProviderConsumerVersionPactResponse)(nil), "GetProviderConsumerVersionPactResponse")
	proto1.RegisterType((*Verification)(nil), "Verification")
	proto1.RegisterType((*VerificationSummary)(nil), "VerificationSummary")
	proto1.RegisterType((*VerificationDetail)(nil), "VerificationDetail")
	proto1.RegisterType((*VerificationDetails)(nil), "VerificationDetails")
	proto1.RegisterType((*VerificationResult)(nil), "VerificationResult")
	proto1.RegisterType((*PublishVerificationRequest)(nil), "PublishVerificationRequest")
	proto1.RegisterType((*PublishVerificationResponse)(nil), "PublishVerificationResponse")
	proto1.RegisterType((*RetrieveVerificationRequest)(nil), "RetrieveVerificationRequest")
	proto1.RegisterType((*RetrieveVerificationResponse)(nil), "RetrieveVerificationResponse")
	proto1.RegisterType((*BaseBrokerRequest)(nil), "BaseBrokerRequest")
	proto1.RegisterType((*BrokerAPIInfoEntry)(nil), "BrokerAPIInfoEntry")
	proto1.RegisterType((*BrokerHomeResponse)(nil), "BrokerHomeResponse")
	//proto1.RegisterEnum("Response_Code", Response_Code_name, Response_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BrokerServiceCtrl service

type BrokerServiceCtrlClient interface {
	GetBrokerHome(ctx context.Context, in *BaseBrokerRequest, opts ...grpc.CallOption) (*BrokerHomeResponse, error)
	PublishPact(ctx context.Context, in *PublishPactRequest, opts ...grpc.CallOption) (*PublishPactResponse, error)
	GetAllProviderPacts(ctx context.Context, in *GetAllProviderPactsRequest, opts ...grpc.CallOption) (*GetAllProviderPactsReponse, error)
	GetPactsOfProvider(ctx context.Context, in *GetProviderConsumerVersionPactRequest, opts ...grpc.CallOption) (*GetProviderConsumerVersionPactResponse, error)
	DeletePacts(ctx context.Context, in *BaseBrokerRequest, opts ...grpc.CallOption) (*Response, error)
	RetrieveProviderPacts(ctx context.Context, in *GetAllProviderPactsRequest, opts ...grpc.CallOption) (*GetAllProviderPactsReponse, error)
	PublishVerificationResults(ctx context.Context, in *PublishVerificationRequest, opts ...grpc.CallOption) (*PublishVerificationResponse, error)
	RetrieveVerificationResults(ctx context.Context, in *RetrieveVerificationRequest, opts ...grpc.CallOption) (*RetrieveVerificationResponse, error)
}

type brokerServiceCtrlClient struct {
	cc *grpc.ClientConn
}

func NewBrokerServiceCtrlClient(cc *grpc.ClientConn) BrokerServiceCtrlClient {
	return &brokerServiceCtrlClient{cc}
}

func (c *brokerServiceCtrlClient) GetBrokerHome(ctx context.Context, in *BaseBrokerRequest, opts ...grpc.CallOption) (*BrokerHomeResponse, error) {
	out := new(BrokerHomeResponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/getBrokerHome", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) PublishPact(ctx context.Context, in *PublishPactRequest, opts ...grpc.CallOption) (*PublishPactResponse, error) {
	out := new(PublishPactResponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/publishPact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) GetAllProviderPacts(ctx context.Context, in *GetAllProviderPactsRequest, opts ...grpc.CallOption) (*GetAllProviderPactsReponse, error) {
	out := new(GetAllProviderPactsReponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/getAllProviderPacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) GetPactsOfProvider(ctx context.Context, in *GetProviderConsumerVersionPactRequest, opts ...grpc.CallOption) (*GetProviderConsumerVersionPactResponse, error) {
	out := new(GetProviderConsumerVersionPactResponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/getPactsOfProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) DeletePacts(ctx context.Context, in *BaseBrokerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/deletePacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) RetrieveProviderPacts(ctx context.Context, in *GetAllProviderPactsRequest, opts ...grpc.CallOption) (*GetAllProviderPactsReponse, error) {
	out := new(GetAllProviderPactsReponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/retrieveProviderPacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) PublishVerificationResults(ctx context.Context, in *PublishVerificationRequest, opts ...grpc.CallOption) (*PublishVerificationResponse, error) {
	out := new(PublishVerificationResponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/publishVerificationResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceCtrlClient) RetrieveVerificationResults(ctx context.Context, in *RetrieveVerificationRequest, opts ...grpc.CallOption) (*RetrieveVerificationResponse, error) {
	out := new(RetrieveVerificationResponse)
	err := grpc.Invoke(ctx, "/BrokerServiceCtrl/retrieveVerificationResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerServiceCtrl service

type BrokerServiceCtrlServer interface {
	GetBrokerHome(context.Context, *BaseBrokerRequest) (*BrokerHomeResponse, error)
	PublishPact(context.Context, *PublishPactRequest) (*PublishPactResponse, error)
	GetAllProviderPacts(context.Context, *GetAllProviderPactsRequest) (*GetAllProviderPactsReponse, error)
	GetPactsOfProvider(context.Context, *GetProviderConsumerVersionPactRequest) (*GetProviderConsumerVersionPactResponse, error)
	DeletePacts(context.Context, *BaseBrokerRequest) (*Response, error)
	RetrieveProviderPacts(context.Context, *GetAllProviderPactsRequest) (*GetAllProviderPactsReponse, error)
	PublishVerificationResults(context.Context, *PublishVerificationRequest) (*PublishVerificationResponse, error)
	RetrieveVerificationResults(context.Context, *RetrieveVerificationRequest) (*RetrieveVerificationResponse, error)
}

func RegisterBrokerServiceCtrlServer(s *grpc.Server, srv BrokerServiceCtrlServer) {
	s.RegisterService(&_BrokerServiceCtrl_serviceDesc, srv)
}

func _BrokerServiceCtrl_GetBrokerHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).GetBrokerHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/GetBrokerHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).GetBrokerHome(ctx, req.(*BaseBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_PublishPact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).PublishPact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/PublishPact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).PublishPact(ctx, req.(*PublishPactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_GetAllProviderPacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProviderPactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).GetAllProviderPacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/GetAllProviderPacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).GetAllProviderPacts(ctx, req.(*GetAllProviderPactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_GetPactsOfProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConsumerVersionPactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).GetPactsOfProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/GetPactsOfProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).GetPactsOfProvider(ctx, req.(*GetProviderConsumerVersionPactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_DeletePacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).DeletePacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/DeletePacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).DeletePacts(ctx, req.(*BaseBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_RetrieveProviderPacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProviderPactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).RetrieveProviderPacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/RetrieveProviderPacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).RetrieveProviderPacts(ctx, req.(*GetAllProviderPactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_PublishVerificationResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).PublishVerificationResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/PublishVerificationResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).PublishVerificationResults(ctx, req.(*PublishVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServiceCtrl_RetrieveVerificationResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceCtrlServer).RetrieveVerificationResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerServiceCtrl/RetrieveVerificationResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceCtrlServer).RetrieveVerificationResults(ctx, req.(*RetrieveVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerServiceCtrl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BrokerServiceCtrl",
	HandlerType: (*BrokerServiceCtrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBrokerHome",
			Handler:    _BrokerServiceCtrl_GetBrokerHome_Handler,
		},
		{
			MethodName: "publishPact",
			Handler:    _BrokerServiceCtrl_PublishPact_Handler,
		},
		{
			MethodName: "getAllProviderPacts",
			Handler:    _BrokerServiceCtrl_GetAllProviderPacts_Handler,
		},
		{
			MethodName: "getPactsOfProvider",
			Handler:    _BrokerServiceCtrl_GetPactsOfProvider_Handler,
		},
		{
			MethodName: "deletePacts",
			Handler:    _BrokerServiceCtrl_DeletePacts_Handler,
		},
		{
			MethodName: "retrieveProviderPacts",
			Handler:    _BrokerServiceCtrl_RetrieveProviderPacts_Handler,
		},
		{
			MethodName: "publishVerificationResults",
			Handler:    _BrokerServiceCtrl_PublishVerificationResults_Handler,
		},
		{
			MethodName: "retrieveVerificationResults",
			Handler:    _BrokerServiceCtrl_RetrieveVerificationResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

func init() { proto1.RegisterFile("broker.proto", fileDescriptor0) }

/*
var fileDescriptor0 = []byte{
	// 1263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xff, 0x53, 0x96, 0x6c, 0x6b, 0xe4, 0x24, 0xce, 0x2a, 0xf9, 0x43, 0xa0, 0x9d, 0xc0, 0xd8,
	0x36, 0x89, 0x9b, 0x06, 0x44, 0xeb, 0x7e, 0x24, 0x28, 0x8a, 0x00, 0x8e, 0xe3, 0xa6, 0x46, 0x13,
	0x5b, 0xa5, 0xeb, 0x04, 0x08, 0x0a, 0x04, 0x14, 0x39, 0x92, 0x58, 0xf3, 0xab, 0xbb, 0x4b, 0x05,
	0x3e, 0xf4, 0xd2, 0x5b, 0x1f, 0xa3, 0x2f, 0xd0, 0xbe, 0x41, 0x1f, 0xa1, 0xcf, 0xd1, 0x53, 0x6f,
	0xbd, 0x17, 0xbb, 0x5c, 0x52, 0x94, 0x44, 0xc9, 0x36, 0x10, 0xf4, 0xa4, 0x9d, 0x0f, 0xce, 0xfe,
	0xe6, 0x37, 0xb3, 0xb3, 0x2b, 0x58, 0xeb, 0xb1, 0xf8, 0x14, 0x99, 0x95, 0xb0, 0x58, 0xc4, 0xf4,
	0x04, 0x5a, 0x5d, 0x87, 0x09, 0xdf, 0xf5, 0x13, 0x27, 0x12, 0xe4, 0x2a, 0xd4, 0x7c, 0xaf, 0x63,
	0x6c, 0x19, 0xdb, 0x0d, 0xbb, 0xe6, 0x7b, 0xe4, 0x06, 0x34, 0x9c, 0x24, 0x39, 0xf0, 0x3a, 0xb5,
	0x2d, 0x63, 0xbb, 0x69, 0x67, 0x02, 0xd9, 0x82, 0x16, 0x47, 0x36, 0xf2, 0x5d, 0x3c, 0x74, 0x42,
	0xec, 0x2c, 0x29, 0x5b, 0x59, 0x45, 0x43, 0x58, 0x79, 0x89, 0x8c, 0xfb, 0x71, 0x34, 0x13, 0xf2,
	0xff, 0xb0, 0x1c, 0xa5, 0x61, 0x0f, 0x99, 0x8e, 0xa9, 0x25, 0xf2, 0x3e, 0x5c, 0x49, 0xc6, 0x48,
	0x0e, 0x3c, 0x15, 0xb6, 0x61, 0x4f, 0x2a, 0x25, 0xa0, 0x98, 0x79, 0xc8, 0x3a, 0x75, 0x65, 0xcd,
	0x04, 0xfa, 0x9b, 0x01, 0xf5, 0xae, 0xe3, 0xce, 0xe2, 0xff, 0x14, 0x6e, 0xba, 0x71, 0xc4, 0xd3,
	0x10, 0x59, 0x77, 0x22, 0x78, 0x4d, 0xb9, 0x54, 0x1b, 0xe5, 0x57, 0x09, 0x8b, 0x47, 0xbe, 0x37,
	0xfd, 0x55, 0x06, 0xa9, 0xda, 0x48, 0xd6, 0x61, 0x89, 0x0f, 0x1d, 0x05, 0x6c, 0xcd, 0x96, 0x4b,
	0xd2, 0x81, 0x15, 0x37, 0x8e, 0x04, 0x46, 0xa2, 0xd3, 0x50, 0xda, 0x5c, 0xa4, 0xbf, 0x18, 0x92,
	0x77, 0x57, 0xcc, 0x23, 0x69, 0x13, 0x9a, 0xa3, 0xcc, 0x54, 0x60, 0x1d, 0x2b, 0x24, 0x85, 0x89,
	0xe3, 0x8e, 0x01, 0x69, 0x69, 0x3e, 0xee, 0xfa, 0x02, 0xdc, 0xf4, 0x21, 0x2c, 0x7d, 0xe7, 0x0c,
	0x08, 0x81, 0x7a, 0x24, 0xab, 0x69, 0xa8, 0xaa, 0xa8, 0xf5, 0x62, 0x18, 0xf4, 0x67, 0x03, 0x48,
	0x37, 0xed, 0x05, 0x3e, 0x1f, 0xca, 0x5c, 0x6c, 0xfc, 0x31, 0x45, 0x2e, 0xc8, 0x6d, 0x80, 0x7c,
	0xa3, 0x03, 0x4f, 0x87, 0x2b, 0x69, 0xa4, 0x3d, 0xa7, 0xbd, 0x68, 0xac, 0x92, 0x46, 0xb2, 0xa6,
	0xf7, 0xd0, 0x9d, 0x95, 0x8b, 0x12, 0xa2, 0xcc, 0x54, 0x53, 0xac, 0xd6, 0x54, 0xc0, 0xaa, 0x8d,
	0x3c, 0x89, 0x23, 0x8e, 0x84, 0x42, 0xdd, 0x8d, 0xbd, 0x2c, 0x85, 0xab, 0x3b, 0x57, 0xad, 0xdc,
	0x60, 0xed, 0xc5, 0x1e, 0xda, 0xca, 0x26, 0xa3, 0x87, 0xc8, 0xb9, 0x33, 0x40, 0xbd, 0x75, 0x2e,
	0xd2, 0xfb, 0x50, 0x97, 0x7e, 0xa4, 0x05, 0x2b, 0x27, 0x87, 0xdf, 0x1c, 0x1e, 0xbd, 0x3a, 0x5c,
	0xff, 0x9f, 0x14, 0x8e, 0x4f, 0xf6, 0xf6, 0xf6, 0x8f, 0x8f, 0xd7, 0x0d, 0xb2, 0x0a, 0xf5, 0xaf,
	0x76, 0x0f, 0x9e, 0xaf, 0xd7, 0xe8, 0x97, 0xd0, 0x9e, 0xc8, 0x5c, 0x03, 0xb8, 0x03, 0xab, 0x4c,
	0xaf, 0x15, 0x88, 0xd6, 0x4e, 0xb3, 0x00, 0x61, 0x17, 0x26, 0xfa, 0x03, 0x98, 0xcf, 0x50, 0xec,
	0x06, 0x41, 0xb7, 0x28, 0x88, 0x2b, 0xf8, 0x45, 0xf9, 0x7b, 0x00, 0x2b, 0x3d, 0x87, 0xe3, 0x09,
	0x0b, 0x54, 0x06, 0xad, 0x1d, 0x62, 0x3d, 0x71, 0x38, 0x3e, 0x51, 0xc7, 0x5a, 0x07, 0xb1, 0x73,
	0x17, 0xfa, 0x39, 0xac, 0xed, 0xe5, 0xdc, 0x46, 0xfd, 0x58, 0x72, 0x38, 0x64, 0xd8, 0xcf, 0xcb,
	0x2c, 0xd7, 0x45, 0xe9, 0x6b, 0xe3, 0xd2, 0xd3, 0x07, 0xd0, 0x78, 0xee, 0x47, 0xa7, 0x9c, 0xbc,
	0x07, 0x0d, 0x49, 0x34, 0xef, 0x18, 0x5b, 0x4b, 0xdb, 0xad, 0x9d, 0x2b, 0x56, 0x39, 0x9c, 0x9d,
	0xd9, 0x68, 0x6f, 0x4e, 0x46, 0x97, 0xa1, 0x85, 0xdc, 0x82, 0xe5, 0x37, 0x81, 0xdc, 0x53, 0xe7,
	0xb5, 0x6c, 0x29, 0x04, 0x76, 0x06, 0x84, 0xfe, 0x6e, 0xc0, 0x9d, 0x67, 0x28, 0xf2, 0x1d, 0x72,
	0x18, 0xfa, 0x08, 0xfd, 0x37, 0x1d, 0x58, 0xe2, 0xbe, 0x7e, 0x3e, 0xf7, 0x2e, 0xdc, 0x3d, 0x0f,
	0xf0, 0xa5, 0x1a, 0xa7, 0x38, 0x00, 0xb5, 0xd2, 0x01, 0xf8, 0xcb, 0x80, 0xb5, 0x97, 0xc8, 0xfc,
	0xbe, 0xef, 0x3a, 0xe2, 0xfc, 0x81, 0xdb, 0x98, 0x1c, 0xb8, 0xc5, 0x08, 0x2a, 0x0f, 0xdc, 0x92,
	0x52, 0x72, 0xc1, 0x53, 0xd7, 0x45, 0xce, 0x55, 0xc6, 0xab, 0x76, 0x2e, 0x92, 0x6d, 0xb8, 0x96,
	0x73, 0xaa, 0xdd, 0xd5, 0x94, 0x6b, 0xda, 0xd3, 0x6a, 0x62, 0xc2, 0x6a, 0x2f, 0xf5, 0x03, 0x4f,
	0xd2, 0xb6, 0xac, 0x5c, 0x0a, 0x99, 0xdc, 0x87, 0xf5, 0x51, 0x09, 0xfd, 0x53, 0x47, 0x60, 0x67,
	0x45, 0xf9, 0xcc, 0xe8, 0xe9, 0x00, 0xda, 0xe5, 0x4c, 0x8f, 0xd3, 0x30, 0x74, 0xd8, 0x99, 0x2c,
	0xa7, 0xc6, 0xd4, 0x4f, 0x03, 0xd5, 0xa6, 0x4d, 0xbb, 0xa4, 0x91, 0x04, 0xf4, 0x1d, 0x3f, 0x40,
	0x59, 0x6a, 0x69, 0xd3, 0x92, 0x4c, 0x2d, 0x8d, 0x4e, 0xa3, 0xf8, 0xad, 0x2c, 0xb3, 0x34, 0xe4,
	0x22, 0xfd, 0xc3, 0x00, 0x52, 0xde, 0xe9, 0x29, 0x0a, 0xc7, 0x0f, 0x08, 0x85, 0xb5, 0x3c, 0xb5,
	0xc3, 0xf1, 0xa8, 0x9c, 0xd0, 0x91, 0xc7, 0x60, 0xe6, 0xf2, 0x6e, 0x92, 0x04, 0x3a, 0x40, 0x4e,
	0x50, 0xd6, 0x6b, 0x0b, 0x3c, 0xca, 0x7c, 0x2f, 0x4d, 0xf2, 0x5d, 0xc5, 0x54, 0x7d, 0x0e, 0x53,
	0xdf, 0x4f, 0x32, 0x95, 0xe1, 0xe7, 0x64, 0x1f, 0xda, 0x65, 0x57, 0x1b, 0x79, 0x1a, 0x14, 0x27,
	0xbb, 0x6d, 0xcd, 0x7e, 0x62, 0x57, 0xf9, 0xd3, 0x5f, 0xa7, 0xe8, 0xc9, 0xf4, 0x65, 0xe8, 0xc6,
	0x24, 0xf4, 0xc7, 0xe3, 0x56, 0xd1, 0x45, 0xd3, 0x47, 0xfc, 0x86, 0x55, 0x51, 0x50, 0x7b, 0xda,
	0x99, 0x7c, 0x0c, 0xcd, 0x37, 0x18, 0xf6, 0xd0, 0xf3, 0x30, 0x6b, 0xd3, 0xe9, 0x2f, 0x75, 0x82,
	0xf6, 0xea, 0xbe, 0xf6, 0xa2, 0x7f, 0x1a, 0x60, 0xea, 0x11, 0x3d, 0x09, 0xf5, 0xdd, 0x8c, 0x88,
	0x79, 0x57, 0xf0, 0xfc, 0xe3, 0xb2, 0xb8, 0x31, 0x1a, 0xe7, 0x35, 0x06, 0xfd, 0x09, 0x36, 0x2a,
	0xf3, 0xb9, 0xdc, 0x04, 0x79, 0x08, 0x6b, 0x6e, 0x1c, 0xf5, 0x7d, 0x16, 0xaa, 0xcf, 0x75, 0x19,
	0x2a, 0x4b, 0x3f, 0xe1, 0x48, 0x07, 0xb0, 0x61, 0xa3, 0x60, 0x3e, 0x8e, 0x70, 0x0e, 0x9f, 0x25,
	0xbe, 0x8c, 0x19, 0xbe, 0xb6, 0xe1, 0x9a, 0x3b, 0x39, 0xff, 0x34, 0xa9, 0xd3, 0x6a, 0xca, 0x60,
	0xb3, 0x7a, 0xa3, 0xcb, 0x25, 0xfa, 0x21, 0x2c, 0x33, 0xd5, 0x96, 0x95, 0x29, 0x66, 0x1d, 0x6b,
	0x6b, 0x17, 0xfa, 0x02, 0xae, 0xcf, 0x8c, 0x71, 0xf9, 0xca, 0x1d, 0xc6, 0x5c, 0xec, 0x7a, 0x1e,
	0xcb, 0x5b, 0xba, 0x69, 0x97, 0x55, 0xb2, 0x09, 0xb8, 0x3b, 0xc4, 0xe2, 0xe6, 0xd4, 0x12, 0x4d,
	0x80, 0x64, 0xa1, 0x76, 0xbb, 0x07, 0xf2, 0x96, 0xdc, 0x8f, 0x04, 0x3b, 0xbb, 0xe8, 0xcd, 0x2b,
	0x9f, 0xb8, 0xc2, 0x17, 0x41, 0xfe, 0xae, 0xce, 0x04, 0xf9, 0x14, 0x13, 0x18, 0x26, 0x81, 0x23,
	0xd0, 0xd3, 0xad, 0x35, 0x56, 0xd0, 0xbf, 0x8d, 0x7c, 0xcb, 0xaf, 0xe3, 0x10, 0x2f, 0xcb, 0xd5,
	0x67, 0xa5, 0x8b, 0x57, 0x4e, 0x82, 0xdb, 0xd6, 0x6c, 0xac, 0xec, 0x2e, 0x56, 0x99, 0xe8, 0x0b,
	0x59, 0x52, 0xec, 0xa6, 0xcc, 0x47, 0xae, 0xc6, 0xa7, 0xa4, 0x78, 0x36, 0x6b, 0x5b, 0xbb, 0x98,
	0x2f, 0x00, 0xc6, 0x11, 0xe4, 0x5b, 0xf9, 0x14, 0xcf, 0x34, 0x15, 0x72, 0x49, 0x3e, 0x80, 0xc6,
	0xc8, 0x09, 0x52, 0x2c, 0xca, 0x55, 0x11, 0x2b, 0xf3, 0xf8, 0xa2, 0xf6, 0xc8, 0xd8, 0xf9, 0xa7,
	0x0e, 0xd7, 0x33, 0x8f, 0xe3, 0xec, 0x6f, 0xc7, 0x9e, 0x60, 0x01, 0x79, 0x04, 0x57, 0x06, 0x28,
	0xc6, 0xe0, 0x49, 0xc5, 0xf5, 0x6c, 0xb6, 0x2b, 0xb2, 0x23, 0x8f, 0xa0, 0x95, 0x8c, 0x1f, 0x74,
	0xa4, 0x6d, 0xcd, 0x3e, 0x6c, 0xcd, 0x1b, 0x56, 0xd5, 0x9b, 0xef, 0x08, 0xda, 0x83, 0xd9, 0xa7,
	0x0f, 0xd9, 0xb0, 0xe6, 0x3f, 0xf1, 0xcc, 0x39, 0xc6, 0x2c, 0x20, 0x02, 0x19, 0xa0, 0x50, 0xaa,
	0xa3, 0x7e, 0xee, 0x41, 0xee, 0x5a, 0x17, 0x7a, 0xfb, 0x98, 0xf7, 0xac, 0x0b, 0x3e, 0x39, 0x1e,
	0x40, 0xcb, 0xc3, 0x00, 0x05, 0x66, 0x78, 0xab, 0x98, 0x1a, 0x37, 0x0b, 0xf9, 0x16, 0x6e, 0x32,
	0x7d, 0x2a, 0xdf, 0x55, 0x9e, 0xaf, 0xc0, 0x4c, 0x2a, 0x07, 0x9a, 0xbc, 0x63, 0xc8, 0x86, 0x35,
	0x7f, 0x7a, 0x9b, 0x9b, 0xd6, 0xa2, 0x51, 0xf8, 0x1a, 0x36, 0x58, 0xf5, 0x04, 0x51, 0x91, 0x37,
	0xad, 0x05, 0x83, 0xcc, 0xbc, 0x65, 0x2d, 0x9a, 0x3e, 0x4f, 0x3e, 0x82, 0x7b, 0x6e, 0x1c, 0x5a,
	0xc3, 0xd4, 0x79, 0x8b, 0xbe, 0x95, 0x38, 0x0e, 0xb7, 0x5c, 0x8e, 0x96, 0xfe, 0xef, 0xcb, 0x70,
	0xe0, 0x73, 0xc1, 0xce, 0x2c, 0x27, 0xf1, 0x5f, 0x37, 0xd4, 0x3f, 0xec, 0xde, 0xb2, 0xfa, 0xf9,
	0xe4, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0xb8, 0x8d, 0x9b, 0x78, 0x0f, 0x00, 0x00,
}
*/
